x-op-shared: &op-shared # Shared connection URLs
  DATABASE_URL: postgres://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@op-db:5432/${OPENPANEL_POSTGRES_DB}?schema=public
  DATABASE_URL_DIRECT: postgres://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@op-db:5432/${OPENPANEL_POSTGRES_DB}?schema=public
  REDIS_URL: redis://default:${SERVICE_PASSWORD_REDIS}@op-kv:6379
  CLICKHOUSE_URL: ${OPENPANEL_CLICKHOUSE_URL:-http://op-ch:8123/openpanel}

services:
  op-db:
    image: postgres:14-alpine
    restart: always
    volumes:
      - op-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${OPENPANEL_POSTGRES_DB}
      POSTGRES_USER: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  op-kv:
    image: redis:7.2.5-alpine
    restart: always
    command: >
      sh -c "redis-server --requirepass ${SERVICE_PASSWORD_REDIS} --maxmemory-policy noeviction"
    volumes:
      - op-kv-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${SERVICE_PASSWORD_REDIS}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  op-ch:
    image: clickhouse/clickhouse-server:24.3.2-alpine
    restart: always
    volumes:
      - op-ch-data:/var/lib/clickhouse
      - op-ch-logs:/var/log/clickhouse-server
      # Dokploy writes these files under the template's files/ folder.
      - ../files/clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/op-config.xml:ro
      - ../files/clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/op-user-config.xml:ro
      - ../files/clickhouse/init-db.sql:/docker-entrypoint-initdb.d/1_init-db.sql:ro
    # Don't select the DB in the healthcheck; it may not exist yet.
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  op-api:
    image: lindesvard/openpanel-api:${OP_API_VERSION:-latest}
    restart: always
    depends_on:
      op-db:
        condition: service_healthy
      op-ch:
        condition: service_healthy
      op-kv:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_SELF_HOSTED: true
      # URLs (injected from template.toml config.env)
      NEXT_PUBLIC_API_URL: ${SERVICE_FQDN_OPAPI}
      NEXT_PUBLIC_DASHBOARD_URL: ${SERVICE_FQDN_OPDASHBOARD}
      COOKIE_SECRET: ${SERVICE_BASE64_COOKIESECRET}
      ALLOW_REGISTRATION: ${OPENPANEL_ALLOW_REGISTRATION:-false}
      ALLOW_INVITATION: ${OPENPANEL_ALLOW_INVITATION:-true}
      EMAIL_SENDER: ${OPENPANEL_EMAIL_SENDER}
      RESEND_API_KEY: ${RESEND_API_KEY}
      <<: *op-shared
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL...'; until nc -z op-db 5432; do sleep 1; done;
        echo 'Waiting for ClickHouse...'; until nc -z op-ch 8123; do sleep 1; done;
        echo 'Running migrations...'; CI=true pnpm -r run migrate:deploy;
        pnpm start
      "
    healthcheck:
      test:
        ["CMD-SHELL", "curl -fsS http://localhost:3000/healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  op-dashboard:
    image: lindesvard/openpanel-dashboard:${OP_DASHBOARD_VERSION:-latest}
    restart: always
    depends_on:
      op-api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_SELF_HOSTED: true
      NEXT_PUBLIC_API_URL: ${SERVICE_FQDN_OPAPI}
      NEXT_PUBLIC_DASHBOARD_URL: ${SERVICE_FQDN_OPDASHBOARD}
      <<: *op-shared
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS http://localhost:3000/api/healthcheck || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  op-worker:
    image: lindesvard/openpanel-worker:${OP_WORKER_VERSION:-latest}
    restart: always
    depends_on:
      op-api:
        condition: service_healthy
    environment:
      # Bull Board FQDN is optional; leave empty unless you add a domain.
      SERVICE_FQDN_OPBULLBOARD:
      NODE_ENV: production
      NEXT_PUBLIC_SELF_HOSTED: true
      NEXT_PUBLIC_API_URL: ${SERVICE_FQDN_OPAPI}
      <<: *op-shared
    # The worker exposes no public HTTP; a simple process healthcheck:
    healthcheck:
      test: ["CMD-SHELL", "node -e 'process.exit(0)'"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      mode: replicated
      replicas: ${OP_WORKER_REPLICAS}

volumes:
  op-db-data:
  op-kv-data:
  op-ch-data:
  op-ch-logs:
